# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'stage2.ui'
#
# Created by: PyQt5 UI code generator 5.15.6
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import pandas as pd
import numpy as np
import Recommenders as rec
from finalwindow import Ui_Dialog


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(826, 644)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.distress_button = QtWidgets.QPushButton(self.centralwidget, clicked= lambda: self.press_it(s="distress_button"))
        self.distress_button.setGeometry(QtCore.QRect(40, 240, 91, 81))
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("distress.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.distress_button.setIcon(icon)
        self.distress_button.setIconSize(QtCore.QSize(91, 71))
        self.distress_button.setFlat(True)
        self.distress_button.setObjectName("distress_button")
        self.misery_button = QtWidgets.QPushButton(self.centralwidget, clicked=lambda:self.press_it(s="misery_button"))
        self.misery_button.setGeometry(QtCore.QRect(180, 250, 71, 71))
        self.misery_button.setText("")
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap("misery.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.misery_button.setIcon(icon1)
        self.misery_button.setIconSize(QtCore.QSize(91, 71))
        self.misery_button.setFlat(True)
        self.misery_button.setObjectName("misery_button")
        self.sorrow_button = QtWidgets.QPushButton(self.centralwidget, clicked=lambda:self.press_it(s="sorrow_button"))
        self.sorrow_button.setGeometry(QtCore.QRect(300, 240, 71, 71))
        self.sorrow_button.setText("")
        icon2 = QtGui.QIcon()
        icon2.addPixmap(QtGui.QPixmap("sorrow.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.sorrow_button.setIcon(icon2)
        self.sorrow_button.setIconSize(QtCore.QSize(91, 71))
        self.sorrow_button.setFlat(True)
        self.sorrow_button.setObjectName("sorrow_button")
        self.contented_button = QtWidgets.QPushButton(self.centralwidget, clicked=lambda:self.press_it(s="contented_button"))
        self.contented_button.setGeometry(QtCore.QRect(410, 240, 91, 71))
        self.contented_button.setText("")
        icon3 = QtGui.QIcon()
        icon3.addPixmap(QtGui.QPixmap("contentment.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.contented_button.setIcon(icon3)
        self.contented_button.setIconSize(QtCore.QSize(91, 71))
        self.contented_button.setFlat(True)
        self.contented_button.setObjectName("contented_button")
        self.happy_button = QtWidgets.QPushButton(self.centralwidget, clicked=lambda:self.press_it(s="happy_button"))
        self.happy_button.setGeometry(QtCore.QRect(530, 240, 91, 71))
        self.happy_button.setText("")
        icon4 = QtGui.QIcon()
        icon4.addPixmap(QtGui.QPixmap("pleasureORhappy.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.happy_button.setIcon(icon4)
        self.happy_button.setIconSize(QtCore.QSize(91, 71))
        self.happy_button.setFlat(True)
        self.happy_button.setObjectName("happy_button")
        self.excited_button = QtWidgets.QPushButton(self.centralwidget, clicked=lambda: self.press_it(s="excited_button"))
        self.excited_button.setGeometry(QtCore.QRect(660, 240, 81, 71))
        self.excited_button.setText("")
        icon5 = QtGui.QIcon()
        icon5.addPixmap(QtGui.QPixmap("excited.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.excited_button.setIcon(icon5)
        self.excited_button.setIconSize(QtCore.QSize(91, 71))
        self.excited_button.setFlat(True)
        self.excited_button.setObjectName("excited_button")
        self.label_5 = QtWidgets.QLabel(self.centralwidget)
        self.label_5.setGeometry(QtCore.QRect(660, 180, 71, 41))
        font = QtGui.QFont()
        font.setPointSize(16)
        self.label_5.setFont(font)
        self.label_5.setObjectName("label_5")
        self.label_4 = QtWidgets.QLabel(self.centralwidget)
        self.label_4.setGeometry(QtCore.QRect(550, 180, 81, 41))
        font = QtGui.QFont()
        font.setPointSize(16)
        self.label_4.setFont(font)
        self.label_4.setObjectName("label_4")
        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        self.label_3.setGeometry(QtCore.QRect(410, 170, 101, 61))
        font = QtGui.QFont()
        font.setPointSize(16)
        self.label_3.setFont(font)
        self.label_3.setObjectName("label_3")
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(300, 190, 81, 31))
        font = QtGui.QFont()
        font.setPointSize(16)
        self.label_2.setFont(font)
        self.label_2.setObjectName("label_2")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(180, 190, 71, 31))
        font = QtGui.QFont()
        font.setPointSize(16)
        self.label.setFont(font)
        self.label.setObjectName("label")
        self.happy_label = QtWidgets.QLabel(self.centralwidget)
        self.happy_label.setGeometry(QtCore.QRect(50, 190, 81, 31))
        font = QtGui.QFont()
        font.setPointSize(16)
        self.happy_label.setFont(font)
        self.happy_label.setObjectName("happy_label")
        self.emotion_show = QtWidgets.QLabel(self.centralwidget)
        self.emotion_show.setGeometry(QtCore.QRect(250, 380, 291, 101))
        font = QtGui.QFont()
        font.setPointSize(28)
        self.emotion_show.setFont(font)
        self.emotion_show.setText("")
        self.emotion_show.setObjectName("emotion_show")
        self.recommend_button = QtWidgets.QPushButton(self.centralwidget, clicked=self.press_recommend)
        self.recommend_button.setGeometry(QtCore.QRect(200, 530, 341, 41))
        font = QtGui.QFont()
        font.setFamily("Ravie")
        font.setPointSize(20)
        self.recommend_button.setFont(font)
        self.recommend_button.setObjectName("recommend_button")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 826, 21))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)


    def press_it(self,s):
        if(s=="contented_button"):
            self.emotion_show.setText("Contented today")
        if(s=="distress_button"):
            self.emotion_show.setText("Distressed today")
        if(s=="excited_button"):
            self.emotion_show.setText("Excited today")
        if(s=="happy_button"):
            self.emotion_show.setText("Happy today")
        if(s=="misery_button"):
            self.emotion_show.setText("Misery today")
        if(s=="sorrow_button"):
            self.emotion_show.setText("Sad today")
        '''
        self.Window=QtWidgets.QDialog()
        self.ui= Ui_Dialog()
        self.ui.setupUi(self.Window)
        self.Window.show()
        '''    



    def press_recommend(self):
        #print()
        if(self.emotion_show.text()=="" or self.emotion_show.text()=="choose emotion"):
            self.emotion_show.setText("choose emotion")
        else:    
            song_list=[]
            if(self.emotion_show.text()=="Contented today"):
                with open("contentment.txt","r") as infile:
                    for lines in infile.readlines():
                        l=lines.split(sep=",")
                        #print(l)
                        song_list.append(l[3]+"-"+l[5])

            if(self.emotion_show.text()=="Distressed today"):
                with open("distress.txt","r") as infile:
                    for lines in infile.readlines():
                        l=lines.split(sep=",")
                        #print(l)
                        song_list.append(l[3]+"-"+l[5])

            if(self.emotion_show.text()=="Excited today"):
                with open("excited.txt","r") as infile:
                    for lines in infile.readlines():
                        l=lines.split(sep=",")
                        #print(l)
                        song_list.append(l[3]+"-"+l[5])

            if(self.emotion_show.text()=="Happy today"):
                with open("pleasure.txt","r") as infile:
                    for lines in infile.readlines():
                        l=lines.split(sep=",")
                        #print(l)
                        song_list.append(l[3]+"-"+l[5])

            if(self.emotion_show.text()=="Misery today"):
                with open("misery.txt","r") as infile:
                    for lines in infile.readlines():
                        l=lines.split(sep=",")
                        #print(l)
                        song_list.append(l[3]+"-"+l[5])

            if(self.emotion_show.text()=="Sad today"):
                with open("sorrow.txt","r") as infile:
                    for lines in infile.readlines():
                        l=lines.split(sep=",")
                        song_list.append(l[3]+"-"+l[5])

            print(song_list)   
            

                    
            filepath1 = r"C:\Users\mistu\Desktop\Bhavrabi mam\triplets_file.csv"

            filepath2 = r"C:\Users\mistu\Desktop\Bhavrabi mam\song_data.csv"


            song_df_1=pd.read_csv(filepath1)
            song_df_2=pd.read_csv(filepath2)
            song_df_main=pd.merge(song_df_1,song_df_2.drop_duplicates(['song_id']),on='song_id',how='left')
            
            song_df_main['song']=song_df_main['title'] +'-'+song_df_main['artist_name']
            song_df_main=song_df_main.head(10000)

            ir=rec.item_similarity_recommender_py()
            ir.create(song_df_main,'user_id','song')
            rec_df=ir.get_similar_items(song_list).drop(['user_id'],axis=1)
            print(rec_df)
            l=[]
            for i in rec_df.index:
                l.append(rec_df['song'][i]+'    '+str(rec_df['rank'][i]))

            print(l)
            self.Window=QtWidgets.QDialog()
            self.ui= Ui_Dialog()
            self.ui.setupUi(self.Window)
            self.Window.show()
            self.ui.label_1.setText(l[0])
            self.ui.label_2.setText(l[1])
            self.ui.label_3.setText(l[2])
            self.ui.label_4.setText(l[3])
            self.ui.label_5.setText(l[4])
            self.ui.label_6.setText(l[5])
            self.ui.label_7.setText(l[6])
            self.ui.label_8.setText(l[7])
            self.ui.label_9.setText(l[8])
            self.ui.label_10.setText(l[9])
    

            
        
        








    


    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.label_5.setText(_translate("MainWindow", "Excited"))
        self.label_4.setText(_translate("MainWindow", "Happy"))
        self.label_3.setText(_translate("MainWindow", "Contented"))
        self.label_2.setText(_translate("MainWindow", "Sorrow"))
        self.label.setText(_translate("MainWindow", "Misery"))
        self.happy_label.setText(_translate("MainWindow", "Distress"))
        self.recommend_button.setText(_translate("MainWindow", "Recommend Song"))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
